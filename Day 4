Learning about Remix
Basics of where we're going to start
I.E the solidity compiler

What the version number is
    It determines what level of compiler your code is suitable with. There are some codes that are deprecated and need to be updated to the higher versions as very few compilers offer the services anymore. It is key that we remain up to date. However, for practice we can use ranging values of compiler versions. It's ok. Preferable consider middle values and above.
    
License identifier
    At top of contracts, we want to add an SPDX License Identifier. Basically, Solidity and Ethereum communities found out that trust in smart contracts can be better established if source code is available and in terms of legality and copyright, it makes life a lot easier if you added that license at top of your code.
    We will be using the MIT License as it is the most open license out there. It means that anybody can use this code and we don't care.
    //SPDX-License-Identifier: MIT
    
Defining a contract
    Similar to name of class like in Java/OOP languages
    
Variable types and declaration:
    uint256 (unsigned integers with size 256)
    int256 (signed integers till size 256)
        above are max values so they range from 1 till that number
    String 
    Bool
    address
    bytes32 (String converted into byte format, can range from 1-32)
    
Initializing
    How values can be set at first or later during run time (by the caller of function or contract)
Functions or methods

Deploying of contract
    When we deploy the contract, it costs us a littble bit of eth. But since we are using the Virtual Machine on Remix, its fake eth. We are assinged 100 eth to each of 10 accounts provided
    
Visibilities
    External
        The function can't be called by the same contract. It has to be done by another contract/account
    Public
        Public functions and variables can be called by anyone. Variables in solidity are a function call to just look at them and return whatever variable that is.
    Internal
        Internal functions can only be called by functions within that contract or in the derived contract. By default, a variable is set to internal.
    Private
        Private functions and state variables are only visible for contracts they are defined in (not even derived contracts). It is the most restrictive of visibility modifiers.
        
Scope
    Say we defined our variable inside a function, then we wont be able to see it the same way as before. By default, when we define a variable just inside the contract but out of any functions, then it has a 'global' or 'contract' scope.
    
View Functions:
    These are used to retrieve data. They dont perform any changes and thus are seen as blue in color (along with the public variable that we defined). Whereas our regular functions have the orange color. Indicating that they do have some function
    
Pure Function:
    We also have pure function that are used purely for mathematical operations.
    
Struct
    What if we have a group or lsit of people who wish to store their age?
    or what if we want to associate an age to that specific person?
    One of the solution is using Structs
    Struct is a way to define new types of solidity. THey're almost like creating new objects.
    
    Now, we can add value to this with help of syntax
     stuct_name public instance_name = struct_name ({ variable : value, ...});

Intro to Storage
    Variables in solidity are always stored in numeric index fashion. In our contract, we first declared age, so it will be at index 0. Now, within the struct that we declared we have 2 variables, even if named the same (as one outside its scope), for the items inside struct, the y will begin from index 0

Arrays:
    Let's say we now want to create a whole list of people. How do we do that?
    An array[] is a way of storing a list or a group of objects
    syntax:
        <struct_name> [] <visibility_modifier> <instance_name>;
    In the format shown above, we have a dyamic array, we can also form a static array by entering some numeric value (acts as the size of array) within the square brackets. ex:
     Humans[2] public boys;
     THe above array can only have a max of 2 boys inside
     
    In the practice example I will be using a dynamic array because I wish to add an arbitrary number of boys to it.
    We then use a function that takes name and age from user and pushes it into our array
    
In Solidity, there are in general 2 ways to store information, In Memory or in Storage.

Memory:
    If you store an object in memory then it means that it will only be stored during execution of the function or the contract call.
Storage:
    If we store it in storage then data will persist even after function executes. 

String in solidity is actually technically not a value type. A string is an array of bytes. A variable of type string is actually a special type of array that we can append to.
Because it is technically an object, we've got to decide whether we want to store it in memory or storage. Since we only need a name during execution, we can have it be a string memory name. Then, when we create this new Humans object, we'll create a new copy of the 'x' variable into storage.

In summary, memory means after execution, delete this variable and storage means keep it forever.

Now we look into Mapping
    Mapping takes some type of key and spits out whatever variable it is mapped to.
    In our case, let's try to find out age of boy using his name
    We have been successful in doing so.

Deploying to a live network:
    Now that we have a contract we decided we like, it has mappings, enables us to actually store boys and their ages. We've done all of our testing in JavaScript VM and we've decided that we want to deploy this to an actual testnet or mainnet.
    How do we deploy iy so that other people will be able to interact with this?
    
    We shall again be using the Rinkeby test network. We will be needing some test ether in our wallet which we can get from the Rinkeby faucet(Google it) or a better alternative (it's mentioned in my reference, I still have to confirm it) is to go to the link token contracts in the chainlink documentation.
   
    The only thing we have to change in Remix is that we need to change from JavaScript VM to Injected Web3. A metamask extension will pop up. 
    Injected Web3 means we are taking our metamask and injecting it into the source code of the browser. Web3 provider is needed if we want to use our own blockchain node or web3 provider. When we do inject web3 we say that our web3 provider is metamask, which will work perfectly for what we are trying to do.
    
    If you deploy the contract onto web3 provider, metamask will ask you if this transaction really is something you want to do beacuse we're deploying the contract, changing the state of blockchain and this action will cost some gas. We get a link to Etherscan (similar to what we saw before when we made a transaction). THe difference here is that instead of sending ethereum to somebody, we're actually making a transaction on the blockchain to "Create" a contract. After a short while, it will show up in status as success. 
    The number of block confirmations is the number of blocks appended to the block that included our transaction.

Interacting with Deployed Contracts:
    As for working with the VM, everything else is the same except for changing state of blockchain, Metamask will pop up and ask us for confirmation and then do our transaction.
   
EVM:
    All solidity code that we have written so far and our interactions with the blockchain, all the above solidity was compiled down to the EVM, also known as Ethereum Virtual Machine. A lot of blockchains out there today are what's called EVM compatible which means that all the solidity and all the functions that we have created can still be compiled down to EVM and deploted on their blockchain.
    We'll find out more about this in the future
    
Summary:
    -First set version number of contract, then name it
    -A contract in solidity is like a class and defines all the functions and parameters of your contract.
    -There are numerous data types in solidity like string, unsigned integers, bytes, etc
    - we can create struct, asrrays, mappings, functions in solidity
    -View functions dont make a state change
    -Memory and storage are 2 different ways to initialize where a variable is going to be saved
    -All of the solidity code that we work with gets compiled down to EVM
    
    
